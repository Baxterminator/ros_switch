{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ROS Switch Documentation","text":"<p>Welcome on the ROS Switch documentation! You will find here all references on how to install, use, configure and contribute to this application.</p>"},{"location":"#what-is-this-project-about","title":"What is this project about ?","text":"<p>As a student, I was working on several ROS projects at the same time. And honestly, it's tiring to modify my .bashrc every time I need a new configuration, and launch the function everytime I open a new terminal. So why not have a program that would take simple YAML configuration, generate automatically these bash script and let me switch from one environment to another easily ?</p> <p>That's what this project is about: </p> <ul> <li>simplifying the ROS environment configuration through a simple YAML file that can be easily shared, </li> <li>provide tools to switch between custom environment with a proper cleaning of path and environment variables.</li> </ul> <p>This project was heavily inspired from the ros_management_tools project from the professor O. Kermorgant from the LS2N (laboratory on the Centrale Nantes campus, France), who made a simple bash script for switching between the several ROS environments needed for the labs.</p> <p>     Distributed under the MIT Licence - \u00a9 Meltwin 2024 </p>"},{"location":"cmd/","title":"Command line usage","text":"<p>On this page you will find the documentation of the usage of the <code>rosswitch</code> command line application.</p>"},{"location":"cmd/#available-terminal-commands","title":"Available terminal commands","text":"<p>The application provide several basic commands for managing the profiles:</p> <ul> <li><code>rosswitch load &lt;profile name&gt;</code> or <code>rosswitch &lt;profile name&gt;</code> Load a profile. The profile name can be either the name of the configuration file, or the name with underscore replaced by spaces. It will first check if there's a current preset loaded and will unload it before hand. E.g. a profile file named <code>custom_profile.rosprofile</code> can be loaded by calling either <code>rosswitch load custom_profile</code> or <code>rosswitch load \"Custom Profile\"</code>.</li> <li><code>rosswitch gen &lt;profile name&gt;</code>  Force a (re-)generation of the load and unload script, for example if you changed it.</li> <li><code>rosswitch unload</code>  Unload the current profile and clear the paths.</li> </ul> <p>Aliases</p> <p>To make it easier, several aliases are defined to the <code>rosswitch</code> command:</p> <ul> <li><code>rswitch</code></li> <li><code>rswtch</code></li> </ul> <p>You can of course define your own aliases to make it easier for you by putting the following line in your .bashrc (or .zshrc):</p> <pre><code>alias &lt;your alias here&gt;=rosswitch\n</code></pre>"},{"location":"cmd/#available-tools","title":"Available tools","text":"<p>There is also a command <code>tools</code> to access several tools (mainly for debug purpose):</p> <ul> <li><code>rosswitch tools colors</code>  Display all the available color scheme that can be used for the preset name display in the terminal. Check the YAML Reference for the list of all available colors.</li> </ul>"},{"location":"cmd/#other-aliases","title":"Other aliases","text":"<p>Other aliases are defined to ease ROS development. They are setup in the <code>setup.sh</code> file that you source in your .bashrc (.zshrc).</p> <ul> <li><code>colbuild</code> is an aliase for <code>colcon build --symlink-install</code></li> </ul>"},{"location":"config/","title":"App Configuration","text":""},{"location":"config/#ros-profiles","title":"ROS Profiles","text":"<p>This application use custom YAML files called ROS profiles. These profiles is used to describe the environment you wants to load, the environment variable to set, the commands to set, etc. For more information on what you can configure through these profiles check the YAML Reference.</p> <p>These profiles are files that should have the <code>.rosprofile</code> extension (to be sure to not mix them with other YAML files). They should be located in defined directories:</p> System Install Path Admin Path User Path Linux-based <code>/opt/ros/ros_switch/</code> <code>~/.local/share/ros_switch/</code> MacOS <code>~/Library/Preferences/ros_switch/</code> <p>For each of these paths, the directory (what we will call <code>dir</code> here) has the following structure:</p> <pre><code>dir/\n    profile/  # Where you should put the .rosprofile files\n    loader/   # Where the loading script will be generated\n    unloader/ # Where the unloading script will be generated\n</code></pre> <p>Custom paths for the profiles location</p> <p>If these paths are not enough for you or if you need a more complex configuration, you can setup custom paths with environment variables:</p> <ul> <li><code>RSWCH_CUSTOM_ADMIN_PATHS</code>: for adding paths to the admin level (that use shouldn't modify)</li> <li><code>RSWCH_CUSTOM_PATHS</code>: for adding paths to the user level</li> </ul>"},{"location":"install/","title":"Install from source (Linux)","text":""},{"location":"install/#get-the-sources","title":"Get the sources","text":"<p>You can either download the latest release, or clone the repository to you machine.</p>"},{"location":"install/#downloading-the-latest-release","title":"Downloading the latest release","text":"<p>The latest release can be found on this link: ROS Switch - Release page. Now unzip it, and place in the root directory (where the <code>requirements.txt</code> and <code>setup.sh</code> files are located).</p>"},{"location":"install/#cloning-from-github","title":"Cloning from Github","text":"<p>In the directory where you want to place the application, run these command:</p> <pre><code>git clone https://github.com/Baxterminator/ros_switch.git\ncd ros_switch\n</code></pre>"},{"location":"install/#install-the-application","title":"Install the application","text":"<p>Now, you have to add the setup script to your <code>.bashrc</code> or <code>.zshrc</code> file (depending on the terminal you use). Just type the following command on your terminal:</p> BashZsh <pre><code>python3 -m pip install -r requirements.txt\necho -e \"# ROS Switch Installation\\nsource $(readlink -f .)/setup.sh\" &gt;&gt; $HOME/.bashrc\n</code></pre> <pre><code>python3 -m pip install -r requirements.txt\necho -e \"# ROS Switch Installation\\nsource $(readlink -f .)/setup.sh\" &gt;&gt; $HOME/.zshrc\n</code></pre> <p>Now you can open a new terminal and the application should be installed. You can check it by running:</p> <pre><code>rosswitch tools colors\n</code></pre> <p>If there are no problem, you should see several lines of text with colors. Else, if any error occur you might have a problem with you installation or your system. In this case, please fill an issue on the project GitHub.</p>"},{"location":"install/#uninstall","title":"Uninstall","text":"<p>To uninstall the application, you have to remove the line from either your <code>.bashrc</code> or <code>.zshrc</code>:</p> <pre><code># ROS Switch Installation\nsource &lt;your installation path&gt;/setup.sh\n</code></pre> <p>And delete the folder containing the application.</p> <p>Cache files are located in: </p> <ul> <li><code>$HOME/.local/share/ros_switch</code> </li> <li><code>/opt/ros/ros_switch</code></li> </ul>"},{"location":"install/compat/","title":"Compatible systems","text":"<p>This software is made to be compatible with as many system as possible. However, it heavily relies on shell script to source ROS workspace, and so is not made for Windows usage. This may be one future goal, but not in the immediate future.</p> <p>You can find below the list of known dependencies and the list known compatible systems.</p> <p>Info</p> <p>For now, this application only works for shell terminal:</p> <ul> <li>bash</li> <li>zsh</li> </ul>"},{"location":"install/compat/#dependencies","title":"Dependencies","text":"Name Version Description Python &gt;= 3.8 Most scripts are in Python3 colorama &gt;= 0.4.4 Python package for putting colors in terminal PyYAML &gt;= 6.0.2 Python package to read YAML files"},{"location":"install/compat/#compatible-systems_1","title":"Compatible systems","text":"System Version Status Ubuntu 22.04 MacOS - Untested Windows -"},{"location":"yaml/","title":"YAML Reference","text":"<p>This application uses YAML files to describe the ROS profiles. This page contains the documentation on how to fill it to match your needs.</p>"},{"location":"yaml/#complete-yaml-file","title":"Complete YAML file","text":"<p>The block below shows the complete YAML file with all possibilities:</p> <pre><code>preset:\n    ros_version: # mandatory &lt;int, choices=[1,2]&gt;\n    metadata:\n        author: \"\" # &lt;str&gt;\n        description: \"\" # &lt;str&gt;\n        date:   \"\" # &lt;str&gt;\n    term:\n        preset_color: \"bred\" # &lt;str&gt; \n    workspaces: # list of workspace path\n        - \"&lt;your workspace 1&gt;\"\n        - \"&lt;your workspace 2&gt;\"\n    env_var:\n        \"CUSTOM_VAR\": 1\n        \"CUSTOM_VAR2\": \"hello\"\n    ros:\n        localhost: None # &lt;bool | None&gt;\n        ros_root:  None # &lt;str | None&gt;\n        log_dir:   None # &lt;str | None&gt;\n        ros_master_uri: None # &lt;str | None&gt;\n        ros_hostname: None # &lt;str | None&gt;\n        ros_ip: None # &lt;str | None&gt;\n        domain_id: None # &lt;int | None&gt;\n        colorized: None # &lt;bool | None&gt;\n        output_format: None # &lt;str | None&gt;\n        use_stdout: None # &lt;bool | None&gt;\n        buffered: None # &lt;bool | None&gt;\n    pre_load: # &lt;List[str]&gt;\n        - \"my_cmd 1\"\n        - \"my_cmd 2\n    post_load: # &lt;List[str]&gt;\n        - \"my_cmd 1\"\n    pre_unload: # &lt;List[str]&gt;\n        - \"my_cmd 1\"\n    post_unload: # &lt;List[str]&gt;\n        - \"my_cmd 1\"\n</code></pre>"},{"location":"yaml/#field-ros_version","title":"Field <code>ros_version</code>","text":"<p>Type: <code>mandatory &lt;int&gt; (choices=[1,2])</code></p> <p>This field is to declare whether you will be loading a ROS1 environment or a ROS2 environment. When choosing ROS1, the <code>$ROS_IP</code> environment variable will always be set.</p>"},{"location":"yaml/#block-metadata","title":"Block <code>metadata</code>","text":"<p>Type: <code>optional</code></p> <p>This block is optional as it is only for declaring the author of the preset and its date (for versionning for example).</p> <p>The fields in this block are:</p> <ul> <li><code>author</code> (<code>optional &lt;str&gt;</code>) a string containing the author name</li> <li><code>description</code> (<code>optional &lt;str&gt;</code>): the description of this preset</li> <li><code>date</code> (<code>optional &lt;str&gt;</code>): the date of the modification of the preset</li> </ul>"},{"location":"yaml/#block-term","title":"Block <code>term</code>","text":"<p>Type: <code>optional</code></p> <p>This block is to configure the terminal settings of the application.</p> <p>The fields in this block are:</p> <ul> <li><code>preset_color</code> (<code>optional &lt;str&gt;</code>): the color scheme to use for this preset in the PS1 field. The list of colors can be visualized with the command <code>rosswitch tools colors</code>. But here's a list of what color are available:</li> </ul> Normal color Light color Bold color black lblack bblack red lred bred green lgreen bgreen yellow lyellow byellow blue lblue bblue purple lpurple bpurple cyan lcyan bcyan white lwhite bwhite Custom PS1 for displaying current loaded profile Output of the command to get the possible preset colors"},{"location":"yaml/#field-workspaces","title":"Field <code>workspaces</code>","text":"<p>Type: <code>optional &lt;List[str]&gt;</code></p> <p>This field should contains the list of the paths of the several ROS workspaces that you want to load with this preset.</p>"},{"location":"yaml/#field-env_var","title":"Field <code>env_var</code>","text":"<p>Type: <code>optional &lt;Dict[str, Any]&gt;</code></p> <p>This field should contain a mapping between environment variable names, and the value that should be assigned to it.</p>"},{"location":"yaml/#block-ros","title":"Block <code>ros</code>","text":"<p>Type: <code>optional</code></p> <p>This block contains the configuration of the ROS environment through its custom environment variables. You can find most of them on the ROS1 and ROS2 online documentation.</p> <p>The fields in this block are:</p> <ul> <li><code>localhost</code> (<code>optional &lt;bool&gt;</code>): define whether you want to use ROS on your machine only or in you network.  Correspond to <code>ROS_LOCALHOST_ONLY</code> env var.  See ROS2 documentation - Localhost for this</li> <li><code>ros_root</code> (<code>optional &lt;str&gt;</code>): define where your ROS root should be (i.e. the location of the ROS core package). Correspond to <code>ROS_ROOT</code> env var. See ROS1 Documentation for more information.</li> <li><code>log_dir</code> (<code>optional &lt;str&gt;</code>): define where the logs directory is located. Correspond to <code>ROS_LOG_DIR</code> env var. See ROS 1 documentation or ROS 2 documentation - Logging</li> <li><code>ros_master_uri</code> (<code>optional &lt;str&gt;</code>): define what the ROS Master URI is. Correspond to <code>ROS_MASTER_URI</code> env var.  See ROS 1 documentation</li> <li><code>ros_hostname</code> (<code>optional &lt;str&gt;</code>): define the hostname of the running nodes in this terminal. Correspond to <code>ROS_HOSTNAME</code> env var.  See ROS 1 documentation</li> <li><code>ros_ip</code> (<code>optional &lt;str&gt;</code>): define the IP of the running nodes in this terminal.Correspond to <code>ROS_IP</code> env var.  See ROS 1 documentation  This field can be filled in two several ways:<ul> <li>using an IPv4 address (as per defined by the ROS documentation). For example, you could write <code>ros_ip: 192.168.1.15</code></li> <li>specifying an interface name (added by this application). You can type part or the entire interface name so that the script will find the first interface with a similar name. For example if you have the interfaces (<code>lo</code>, <code>wlp0s20f3</code>) you could write any of the configuration below and it will choose the second interface. The IP is computed as runtime, so you do not need to build the profile each time you change network: you only have to reload the preset.<ul> <li><code>ros_ip: w</code></li> <li><code>ros_ip: wlp</code></li> <li><code>ros_ip: wlp0s20f3</code></li> </ul> </li> </ul> </li> <li><code>domain_id</code> (<code>optional &lt;int&gt;</code>): set up the id in the DDS domain of you computer.Correspond to <code>ROS_DOMAIN_ID</code> env var.  See ROS 2 documentation - Domain ID</li> <li><code>colorized</code> (<code>optional &lt;bool&gt;</code>): define if the output of the ROS logs be colorized in the terminal. Correspond to <code>RCUTILS_COLORIZED_OUTPUT</code> env var. See ROS 2 documentation - Logging</li> <li><code>output_format</code> (<code>optional &lt;str&gt;</code>): define how the ROS logging format should be. Correspond to <code>RCUTILS_CONSOLE_OUTPUT_FORMAT</code> env var. See ROS 2 documentation - Logging</li> <li><code>use_stdout</code> (<code>optional &lt;bool&gt;</code>): define whether the logging output should go to stdout (1) or stderr (0). Correspond to <code>RCUTILS_LOGGING_USE_STDOUT</code> env var. See ROS 2 documentation - Logging</li> <li><code>buffered</code> (<code>optional &lt;bool&gt;</code>): define whether the logging output should be in buffered (1) or unbuffured mode (0). Correspond to <code>RCUTILS_LOGGING_BUFFERED_STREAM</code> env var. See ROS 2 documentation - Logging</li> </ul>"},{"location":"yaml/#fields-pre_load-post_load-pre_unload-and-post_unload","title":"Fields <code>pre_load</code>, <code>post_load</code>, <code>pre_unload</code> and <code>post_unload</code>","text":"<p>Type: <code>optional &lt;List[str]&gt;</code></p> <p>These four fields should contain the commands that should be runned before and after the loading and unloading of the environment. This is mainly for allowing you to do anything that is not possible with the other YAML configurations.</p>"}]}